/* 
 * MicroCoin
 *
 * # MicroCoin API  MicroCoin Rider is an API server for the MicroCoin ecosystem.  It acts as the interface between MicroCoin network and applications that want to access the MicroCoin network.  It allows you to submit transactions to the network, check the status of accounts, subscribe to transactions, etc.  Rider provides a RESTful API to allow client applications to interact with the MicroCoin network.  You can communicate with Rider using cURL or just your web browser. However, if you’re building a client application, you’ll likely want to use a MicroCoin SDK in the language of your client\";    # Before you begin  Before you start developing useful to download the MicroCoin wallet. You can download the latest version from  the official [MicroCoin website](https://microcoin.hu)    ## Supported programming languages  MicroCoin Rider is a simple REST API. You can call using any language what you prefer.  At this time we are offering PHP and Javascript SDKs, but you can generate your own using the [swagger codegen](https://github.com/swagger-api/swagger-codegen) project.    ## Networks  We have two networks.  The Mainnet, where the production coin runs and the Testnet where you can develop.  The primary Mainnet endpoint: https://rider.microcoin.hu.  The primary Testnet endpoint: https://testnet.rider.microcoin.hu.    ## Accounts  In other cryptocoins you can generate an \"address\" to receive coins.  In MicroCoin that's not possible, address's are like accounts and accounts are generated by the blockchain.  So, the main difference, is that if you don't have a MicroCoin account (mined by yourself or received from another account's owner) you cannot have receive MicroCoins.    ### How can I receive an account?  An account can only be operated by a private key. Account's owners can change the account's key to a new one.  You can generate a Private/Public key pair. You send the PUBLIC KEY (Note: private key must always be kept private and only for you!) to the owner of an account.  The account's owner changes the key of an account to your new public key.  After this, the owner of the account will be you, and the old owner will not have access to operate with this account because he doesn't know the private key.  **For testing and developing you can use the Testnet. On the Testnet you can easily mining accounts.**    # PHP SDK quickstart guide    ## System requirements:  * PHP 5.5 or later  * Network connection    ## Download the client SDK  First you need a MicroCoin Client PHP SDK.    You can install with composer  ```  composer require microcoin/microcoin  ```  You can download it from [here](https://github.com/MicroCoinHU/MicroCoin-PHP-SDK/releases), or clone from our [Github](https://github.com/MicroCoinHU/MicroCoin-PHP-SDK) repository.  ```bash  git clone https://github.com/MicroCoinHU/MicroCoin-PHP-SDK.git  # install PHP dependencies  composer install  ```  ## Keys and signatures  MicroCoin works with ECDSA signatures, so you need to work with ECDSA keys and signatures.  You can use your favorite **ECDSA** package, or use `simplito/elliptic-php`. We are using `simplito/elliptic-php` in our demos.  You can find a detailed documentation on the official github page: https://github.com/simplito/elliptic-php    ## Generate new ECDSA keyPair  If you have no keys, you must generate a new key, then store it in a secure place.  **Please note: if you lose your key, you lose your accounts and your coins**  ```php  use Elliptic\\EC;  $ec = new EC('secp256k1');  $myKey = $ec->genKeyPair();  ```  ## Import ECDSA private key  If you have a key, you can import it from a hexadecimal string.  ```php  use Elliptic\\EC;  $ec = new EC('secp256k1');  $myKey = $ec->keyFromPrivate(\"PRIVATE KEY IN HEX\");  ```  ### Where is your private key?    ![Private key](/img/privkey.png)    ## List your accounts  If you have accounts you can list there. First time you have no accounts, so you need get one.  Every account belongs to a public key. One public key can be used for multiple accounts.  ```php  $api = new \\MicroCoin\\Api\\AccountApi();  // You must convert the ECPoint to a MicroCoin SimpleKey  $key = new \\MicroCoin\\Model\\SimpleKey();  $key->setCurveType(\"secp256k1\");  $key->setX($myKey->getPublic()->getX()->toString(16));  $key->setY($myKey->getPublic()->getY()->toString(16));    print_r($api->myAccounts($key));  ```  ## Get single account  You can fetch any account if you know the account number  ```php  $api = new \\MicroCoin\\Api\\AccountApi();  print_r($api->getAccount('0-10'));  ```      ## List accounts for sale  You can purchase accounts, but you need to know which accounts are for sale.  ```php  $api = new \\MicroCoin\\Api\\AccountApi();  print_r($api->getOffers());  ```    ## Purchase account  You can purchase any account for sale, if you have enough coins.  ```php  $api = new \\MicroCoin\\Api\\AccountApi();    // First convert your public key  $key = new \\MicroCoin\\Model\\SimpleKey([      \"curve_type\" => \"secp256k1\",      \"x\" => $myKey->getPublic()->getX()->toString(16),      \"y\" => $myKey->getPublic()->getY()->toString(16)  ]);    $purchaseAccountRequest = new \\MicroCoin\\Model\\PurchaseAccountRequest();   // Account to purchase  $purchaseAccountRequest->setAccountNumber('0-10');  // Optional fee  $purchaseAccountRequest->setFee(0);  // This account will pay the price and the fee  $purchaseAccountRequest->setFounderAccount('1-22');    // The new owner  $purchaseAccountRequest->setNewKey($key);   // preapare transaction  $transaction = $api->startPurchaseAccount($purchaseAccountRequest);   // Sign transaction  $sign = $myKey->sign($transaction->getHash());  // Fill signature  $transaction->setSignature(new \\MicroCoin\\Model\\Signature([\"r\"=>$sign->r->toString(16), \"s\"=>$sign->r->toString(16)]));  // Commit transaction  $result = $api->commitPurchaseAccount($transaction);  // You are done  print_r($result);    ```    ## Sending coins  If you have enough balance, you can send coins from your accounts to any valid account.  ```php  $api = new \\MicroCoin\\Api\\TransactionApi();  $sendCoinRequest = new \\MicroCoin\\Model\\TransactionRequest();  // Source account  $sendCoinRequest->setSender('0-10');  // Destination account  $sendCoinRequest->setTarget('1-22');  // Amount to send  $sendCoinRequest->setAmount(0.0001);  // Optinal fee  $sendCoinRequest->setFee(0);  // Optional payload  $sendCoinRequest->setPayload(\"Hello MicroCoin\");  // Prepare a new transaction  $transaction = $api->startTransaction($sendCoinRequest);  // Sign transaction with your private key (private key what belongs to the sender account)  $sign = $myKey->sign($transaction->getHash());  // Fill signature  $transaction->setSignature( new \\MicroCoin\\Model\\Signature([\"r\"=>$sign->r->toString(16), \"s\"=>$sign->r->toString(16)]) );  // Commit transaction  $result = $api->commitTransaction($transaction);  // Coins sent  print_r($result);  ```  ## Change account owner  If you want change your account owner, you can do it with change the assigned public key.  ```php  $changeKeyRequest->setAccountNumber('0-10');  // Key of the new owner  $changeKeyRequest->setNewOwnerPublicKey(new \\MicroCoin\\Model\\SimpleKey([      \"curve_type\" => \"secp256k1\",      \"x\" => $newKey->getPublic()->getX()->toString(16),      \"y\" => $newKey->getPublic()->getY()->toString(16)  ]));  $changeKeyRequest->setFee(0);  // Prepare transaction  $transaction = $api->startChangeKey($changeKeyRequest);  // Fill signature  $transaction->setSignature( new \\MicroCoin\\Model\\Signature([\"r\"=>$sign->r->toString(16), \"s\"=>$sign->r->toString(16)]) );  // Commit transaction  $result = $api->commitPurchaseAccount($transaction);  // You are done  print_r($result);  ```  ## Transaction history  You can fetch the transaction history of any account  ```js  $api = new \\MicroCoin\\Api\\AccountApi();  print_r($api.getTransactions(\"0-10\"));  ````    ***      # JS SDK quickstart guide    ## Download the client SDK  First you need a MicroCoin client SDK.  You can download it from [here](https://github.com/MicroCoinHU/MicroCoin-Javacript-SDK/releases/), or clone from our [Github](https://github.com/MicroCoinHU/MicroCoin-Javacript-SDK) repository.  ```bash  git clone https://github.com/MicroCoinHU/MicroCoin-Javacript-SDK.git  npm install  npm i elliptic  ```  Or in the dist folder you will find the precompiled, production ready files. Copy this files into your project and start working.    ## Keys and signatures  MicroCoin works with ECDSA signatures, so you need to work with ECDSA keys and signatures.  You can use your favorite **ECDSA** package, or use `elliptic.js`. We are using `elliptic.js` in our demos.  You can find a detailed documentation on the official github page https://github.com/indutny/elliptic    ## HTML boilerplate  ```html  <!DOCTYPE html>  <html lang=\"en\">  <head>      <meta charset=\"UTF-8\">      <title>MicroCoin client minimum project</title>      <script src=\"/dist/microcoin-promise.js\"></script>      <script src=\"/dist/elliptic.js\"></script>  </head>  <body>  <script>      var api = new MicroCoin.AccountApi();      api.getAccount(\"0-10\").then(account => console.log(account));  </script>  </body>  </html>  ```    ## Generate new ECDSA keyPair  If you have no keys, you must generate a new key, then store it in a secure place.  **Please note: if you lose your key, you lose your accounts and your coins**  ```js  var ec = new elliptic.ec(\"secp256k1\");  var myKey = ec.genKeyPair();  ```  ## Import ECDSA private key  If you have a key, you can import it from a hexadecimal string.  ```js  var ec = new elliptic.ec(\"secp256k1\");  var myKey = ec.keyPair({ \"priv\":\"PRIVATE KEY IN HEX\", \"privEnc\":\"hex\" });  ```    ### Where is your private key?    ![Private key](/img/privkey.png)      ## Export ECDSA key  Sometimes you need save your key, or you need to display it. You can export your key using this method  ```js  var exportedKey = {     private: keyPair.getPrivate(\"hex\"),     public: {         X: keyPair.getPublic().x.toString(16),         Y: keyPair.getPublic().y.toString(16)      }  }  ```    ## List your accounts  If you have accounts you can list there. First time you have no accounts, so you need get one.  Every account belongs to a public key. One public key can be used for multiple accounts.  ```js  var accountApi = new MicroCoin.AccountApi();  // Never send your private key!  accountApi.myAccounts({      \"curveType\":\"secp256k1\",      \"x\": myKey.getPublic().getX(\"hex\"),      \"y\": myKey.getPublic().getY(\"hex\")  }).then(myAccounts => console.log(myAccounts));  ```    ## Get single account  You can request information from a single account. You can see the balance, name, etc..  ```js  var accountApi = new MicroCoin.AccountApi();  accountApi.getAccount(\"0-10\").then(account => console.log(account));  ```    ## List accounts for sale  You can purchase accounts, but you need to know which accounts are for sale.  ```js  var accountApi = new MicroCoin.AccountApi();  accountApi.getOffers().then(offers => console.log(offers));  ```  ## Purchase account  You can purchase any account for sale, if you have enough coins.  ```js  var accountApi = new MicroCoin.AccountApi();  var purchaseRequest = new MicroCoin.PurchaseAccountRequest();  purchaseRequest.setAccountNumber(\"34689-25\"); // The account to purchase  purchaseRequest.setFounderAccount(\"1-22\");   // The founder account will pay for the account  purchaseRequest.setFee(0);  // Optional miner fee  // This is key of the new owner. You can use your own key, or any key what you want.  // After the purchase completed you can only manage this account with this keyPair  purchaseRequest.setNewKey({      \"CurveType\":\"secp256k1\",      \"X\": myKey.getPublic().getX(\"hex\"),      \"Y\": myKey.getPublic().getY(\"hex\")  });  // First prepare the transaction  accountApi.startPurchaseAccount(purchaseRequest).then(function (transaction) {      // Now we need to sign our transaction using the founder account private key      var signature = myKey.sign(transaction.getHash());      // Now fill the signature property      transaction.signature = { \"r\": signature.r, \"s\": signature.s };      // Last we need to commit our transaction and we are done      accountApi.commitPurchaseAccount(transaction).then((response)=>console.log(response), e => console.error(e));  });  ```    ## Sending coins  If you have enough balance, you can send coins from your accounts to any valid account.  ```js  var transactionApi = new MicroCoin.TransactionApi();  var sendCoinRequest = new MicroCoin.TransactionRequest();  sendCoinRequest.setSender('0-10'); // Source account  sendCoinRequest.setTarget('1-22'); // Target account  sendCoinRequest.setAmount(0.0001); // Amount to send  sendCoinRequest.setFee(0); // optional miner fee, one transaction / block (5 min) is free  sendCoinRequest.setPayload(\"Hello MicroCoin\"); // optional payload  // First we are creating a transaction  transactionApi.startTransaction(sendCoinRequest).then(function (transaction) {      // When the transaction created, we need to sign the transaction      var signature = myKey.sign(transaction.getHash());      // Now fill the signature property      transaction.signature = { \"r\": signature.r, \"s\": signature.s };      // Last we need to commit our transaction and we are done      transactionApi.commitTransaction(transaction).then((response)=>console.log(response), e => console.error(e));  });  ```    ## Change account owner  If you want change your account owner, you can do it with change the assigned public key.  ```js  var accountApi = new MicroCoin.AccountApi();  var request = new MicroCoin.ChangeKeyRequest();  request.setAccountNumber(\"0-10\"); // The account to change  // newKey: Public key of the new owner  request.setNewOwnerPublicKey({      \"curveType\":\"secp256k1\",      \"x\": newKey.getPublic().getX(\"hex\"),      \"y\": newKey.getPublic().getY(\"hex\")  });  // First we are creating a transaction  accountApi.startChangeKey(request).then(function (transaction) {      // When the transaction created, we need to sign the transaction      // myKey: key of the current owner       var signature = myKey.sign(transaction.getHash());      transaction.signature = { \"r\": signature.r, \"s\": signature.s };      // Last we need to commit our transaction and we are done, the new owner can use his/her account      accountApi.commitChangeKey(transaction).then((response)=>console.log(response), e => console.error(e));  });  ```    ## Transaction history  You can fetch the transaction history of any account  ```php  var accountApi = new MicroCoin.AccountApi();  api.getTransactions(\"0-10\").then(history=>console.log(history));  ```
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using MicroCoin.API.Client;
using MicroCoin.API.Model;

namespace MicroCoin.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Commit change key transaction
        /// </summary>
        /// <remarks>
        /// With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">The signed transaction</param>
        /// <returns>ChangeKey</returns>
        ChangeKey CommitChangeKey (ChangeKeyRequest changeKey);

        /// <summary>
        /// Commit change key transaction
        /// </summary>
        /// <remarks>
        /// With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">The signed transaction</param>
        /// <returns>ApiResponse of ChangeKey</returns>
        ApiResponse<ChangeKey> CommitChangeKeyWithHttpInfo (ChangeKeyRequest changeKey);
        /// <summary>
        /// Commit signed Purchase account transaction
        /// </summary>
        /// <remarks>
        /// If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Signed transaction</param>
        /// <returns>PurchaseAccount</returns>
        PurchaseAccount CommitPurchaseAccount (PurchaseAccountRequest data);

        /// <summary>
        /// Commit signed Purchase account transaction
        /// </summary>
        /// <remarks>
        /// If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Signed transaction</param>
        /// <returns>ApiResponse of PurchaseAccount</returns>
        ApiResponse<PurchaseAccount> CommitPurchaseAccountWithHttpInfo (PurchaseAccountRequest data);
        /// <summary>
        /// Account detils
        /// </summary>
        /// <remarks>
        /// You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number, example: 1-22, or 1</param>
        /// <returns>Account</returns>
        Account GetAccount (string accountNumber);

        /// <summary>
        /// Account detils
        /// </summary>
        /// <remarks>
        /// You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number, example: 1-22, or 1</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> GetAccountWithHttpInfo (string accountNumber);
        /// <summary>
        /// Get list of accounts for sale
        /// </summary>
        /// <remarks>
        /// This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Account&gt;</returns>
        List<Account> GetOffers ();

        /// <summary>
        /// Get list of accounts for sale
        /// </summary>
        /// <remarks>
        /// This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Account&gt;</returns>
        ApiResponse<List<Account>> GetOffersWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>List&lt;Transaction&gt;</returns>
        List<Transaction> GetPendings (string accountNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of List&lt;Transaction&gt;</returns>
        ApiResponse<List<Transaction>> GetPendingsWithHttpInfo (string accountNumber);
        /// <summary>
        /// Retrieve account transaction history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number to </param>
        /// <param name="start">Start from (optional)</param>
        /// <param name="max">Maximum lines to receive (optional)</param>
        /// <returns>List&lt;Transaction&gt;</returns>
        List<Transaction> GetTransactions (string accountNumber, int? start = null, int? max = null);

        /// <summary>
        /// Retrieve account transaction history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number to </param>
        /// <param name="start">Start from (optional)</param>
        /// <param name="max">Maximum lines to receive (optional)</param>
        /// <returns>ApiResponse of List&lt;Transaction&gt;</returns>
        ApiResponse<List<Transaction>> GetTransactionsWithHttpInfo (string accountNumber, int? start = null, int? max = null);
        /// <summary>
        /// Get a list of accounts belonging to the key
        /// </summary>
        /// <remarks>
        /// Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The public key</param>
        /// <returns>List&lt;Account&gt;</returns>
        List<Account> MyAccounts (SimpleKey key);

        /// <summary>
        /// Get a list of accounts belonging to the key
        /// </summary>
        /// <remarks>
        /// Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The public key</param>
        /// <returns>ApiResponse of List&lt;Account&gt;</returns>
        ApiResponse<List<Account>> MyAccountsWithHttpInfo (SimpleKey key);
        /// <summary>
        /// Create new change key transaction
        /// </summary>
        /// <remarks>
        /// With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">Initial transaction data</param>
        /// <returns>ChangeKeyRequest</returns>
        ChangeKeyRequest StartChangeKey (ChangeKeyRequest changeKey);

        /// <summary>
        /// Create new change key transaction
        /// </summary>
        /// <remarks>
        /// With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">Initial transaction data</param>
        /// <returns>ApiResponse of ChangeKeyRequest</returns>
        ApiResponse<ChangeKeyRequest> StartChangeKeyWithHttpInfo (ChangeKeyRequest changeKey);
        /// <summary>
        /// Create purchase account transaction
        /// </summary>
        /// <remarks>
        /// If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Transaction data</param>
        /// <returns>PurchaseAccountRequest</returns>
        PurchaseAccountRequest StartPurchaseAccount (PurchaseAccountRequest data);

        /// <summary>
        /// Create purchase account transaction
        /// </summary>
        /// <remarks>
        /// If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Transaction data</param>
        /// <returns>ApiResponse of PurchaseAccountRequest</returns>
        ApiResponse<PurchaseAccountRequest> StartPurchaseAccountWithHttpInfo (PurchaseAccountRequest data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Commit change key transaction
        /// </summary>
        /// <remarks>
        /// With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">The signed transaction</param>
        /// <returns>Task of ChangeKey</returns>
        System.Threading.Tasks.Task<ChangeKey> CommitChangeKeyAsync (ChangeKeyRequest changeKey);

        /// <summary>
        /// Commit change key transaction
        /// </summary>
        /// <remarks>
        /// With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">The signed transaction</param>
        /// <returns>Task of ApiResponse (ChangeKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeKey>> CommitChangeKeyAsyncWithHttpInfo (ChangeKeyRequest changeKey);
        /// <summary>
        /// Commit signed Purchase account transaction
        /// </summary>
        /// <remarks>
        /// If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Signed transaction</param>
        /// <returns>Task of PurchaseAccount</returns>
        System.Threading.Tasks.Task<PurchaseAccount> CommitPurchaseAccountAsync (PurchaseAccountRequest data);

        /// <summary>
        /// Commit signed Purchase account transaction
        /// </summary>
        /// <remarks>
        /// If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Signed transaction</param>
        /// <returns>Task of ApiResponse (PurchaseAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseAccount>> CommitPurchaseAccountAsyncWithHttpInfo (PurchaseAccountRequest data);
        /// <summary>
        /// Account detils
        /// </summary>
        /// <remarks>
        /// You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number, example: 1-22, or 1</param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> GetAccountAsync (string accountNumber);

        /// <summary>
        /// Account detils
        /// </summary>
        /// <remarks>
        /// You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number, example: 1-22, or 1</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountAsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// Get list of accounts for sale
        /// </summary>
        /// <remarks>
        /// This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Account&gt;</returns>
        System.Threading.Tasks.Task<List<Account>> GetOffersAsync ();

        /// <summary>
        /// Get list of accounts for sale
        /// </summary>
        /// <remarks>
        /// This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Account>>> GetOffersAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of List&lt;Transaction&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> GetPendingsAsync (string accountNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;Transaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> GetPendingsAsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// Retrieve account transaction history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number to </param>
        /// <param name="start">Start from (optional)</param>
        /// <param name="max">Maximum lines to receive (optional)</param>
        /// <returns>Task of List&lt;Transaction&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> GetTransactionsAsync (string accountNumber, int? start = null, int? max = null);

        /// <summary>
        /// Retrieve account transaction history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number to </param>
        /// <param name="start">Start from (optional)</param>
        /// <param name="max">Maximum lines to receive (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Transaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> GetTransactionsAsyncWithHttpInfo (string accountNumber, int? start = null, int? max = null);
        /// <summary>
        /// Get a list of accounts belonging to the key
        /// </summary>
        /// <remarks>
        /// Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The public key</param>
        /// <returns>Task of List&lt;Account&gt;</returns>
        System.Threading.Tasks.Task<List<Account>> MyAccountsAsync (SimpleKey key);

        /// <summary>
        /// Get a list of accounts belonging to the key
        /// </summary>
        /// <remarks>
        /// Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The public key</param>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Account>>> MyAccountsAsyncWithHttpInfo (SimpleKey key);
        /// <summary>
        /// Create new change key transaction
        /// </summary>
        /// <remarks>
        /// With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">Initial transaction data</param>
        /// <returns>Task of ChangeKeyRequest</returns>
        System.Threading.Tasks.Task<ChangeKeyRequest> StartChangeKeyAsync (ChangeKeyRequest changeKey);

        /// <summary>
        /// Create new change key transaction
        /// </summary>
        /// <remarks>
        /// With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">Initial transaction data</param>
        /// <returns>Task of ApiResponse (ChangeKeyRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeKeyRequest>> StartChangeKeyAsyncWithHttpInfo (ChangeKeyRequest changeKey);
        /// <summary>
        /// Create purchase account transaction
        /// </summary>
        /// <remarks>
        /// If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Transaction data</param>
        /// <returns>Task of PurchaseAccountRequest</returns>
        System.Threading.Tasks.Task<PurchaseAccountRequest> StartPurchaseAccountAsync (PurchaseAccountRequest data);

        /// <summary>
        /// Create purchase account transaction
        /// </summary>
        /// <remarks>
        /// If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
        /// </remarks>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Transaction data</param>
        /// <returns>Task of ApiResponse (PurchaseAccountRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseAccountRequest>> StartPurchaseAccountAsyncWithHttpInfo (PurchaseAccountRequest data);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private MicroCoin.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = MicroCoin.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MicroCoin.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MicroCoin.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Commit change key transaction With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">The signed transaction</param>
        /// <returns>ChangeKey</returns>
        public ChangeKey CommitChangeKey (ChangeKeyRequest changeKey)
        {
             ApiResponse<ChangeKey> localVarResponse = CommitChangeKeyWithHttpInfo(changeKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit change key transaction With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">The signed transaction</param>
        /// <returns>ApiResponse of ChangeKey</returns>
        public ApiResponse< ChangeKey > CommitChangeKeyWithHttpInfo (ChangeKeyRequest changeKey)
        {
            // verify the required parameter 'changeKey' is set
            if (changeKey == null)
                throw new ApiException(400, "Missing required parameter 'changeKey' when calling AccountApi->CommitChangeKey");

            var localVarPath = "./api/Account/change-key/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeKey != null && changeKey.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changeKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changeKey; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitChangeKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ChangeKey) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeKey)));
        }

        /// <summary>
        /// Commit change key transaction With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">The signed transaction</param>
        /// <returns>Task of ChangeKey</returns>
        public async System.Threading.Tasks.Task<ChangeKey> CommitChangeKeyAsync (ChangeKeyRequest changeKey)
        {
             ApiResponse<ChangeKey> localVarResponse = await CommitChangeKeyAsyncWithHttpInfo(changeKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit change key transaction With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using the StartChangeKey method,  then sign it with your private key. You can send your transaction using this method.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">The signed transaction</param>
        /// <returns>Task of ApiResponse (ChangeKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangeKey>> CommitChangeKeyAsyncWithHttpInfo (ChangeKeyRequest changeKey)
        {
            // verify the required parameter 'changeKey' is set
            if (changeKey == null)
                throw new ApiException(400, "Missing required parameter 'changeKey' when calling AccountApi->CommitChangeKey");

            var localVarPath = "./api/Account/change-key/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeKey != null && changeKey.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changeKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changeKey; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitChangeKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ChangeKey) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeKey)));
        }

        /// <summary>
        /// Commit signed Purchase account transaction If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Signed transaction</param>
        /// <returns>PurchaseAccount</returns>
        public PurchaseAccount CommitPurchaseAccount (PurchaseAccountRequest data)
        {
             ApiResponse<PurchaseAccount> localVarResponse = CommitPurchaseAccountWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit signed Purchase account transaction If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Signed transaction</param>
        /// <returns>ApiResponse of PurchaseAccount</returns>
        public ApiResponse< PurchaseAccount > CommitPurchaseAccountWithHttpInfo (PurchaseAccountRequest data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling AccountApi->CommitPurchaseAccount");

            var localVarPath = "./api/Account/purchase/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitPurchaseAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PurchaseAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseAccount)));
        }

        /// <summary>
        /// Commit signed Purchase account transaction If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Signed transaction</param>
        /// <returns>Task of PurchaseAccount</returns>
        public async System.Threading.Tasks.Task<PurchaseAccount> CommitPurchaseAccountAsync (PurchaseAccountRequest data)
        {
             ApiResponse<PurchaseAccount> localVarResponse = await CommitPurchaseAccountAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit signed Purchase account transaction If you created and signed your \&quot;Purchase account\&quot; transaction you need to send it into the network. Call this method to send and commit your signed \&quot;Purchase account\&quot; transaction.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Signed transaction</param>
        /// <returns>Task of ApiResponse (PurchaseAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PurchaseAccount>> CommitPurchaseAccountAsyncWithHttpInfo (PurchaseAccountRequest data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling AccountApi->CommitPurchaseAccount");

            var localVarPath = "./api/Account/purchase/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitPurchaseAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PurchaseAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseAccount)));
        }

        /// <summary>
        /// Account detils You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number, example: 1-22, or 1</param>
        /// <returns>Account</returns>
        public Account GetAccount (string accountNumber)
        {
             ApiResponse<Account> localVarResponse = GetAccountWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account detils You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number, example: 1-22, or 1</param>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse< Account > GetAccountWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountApi->GetAccount");

            var localVarPath = "./api/Account/{AccountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("AccountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Account) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Account detils You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number, example: 1-22, or 1</param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> GetAccountAsync (string accountNumber)
        {
             ApiResponse<Account> localVarResponse = await GetAccountAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account detils You can retrieve details (balance, name, type, etc.) of any account, if you know the account number.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number, example: 1-22, or 1</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountAsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountApi->GetAccount");

            var localVarPath = "./api/Account/{AccountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("AccountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Account) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Get list of accounts for sale This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Account&gt;</returns>
        public List<Account> GetOffers ()
        {
             ApiResponse<List<Account>> localVarResponse = GetOffersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of accounts for sale This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Account&gt;</returns>
        public ApiResponse< List<Account> > GetOffersWithHttpInfo ()
        {

            var localVarPath = "./api/Account/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Account>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Account>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Account>)));
        }

        /// <summary>
        /// Get list of accounts for sale This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Account&gt;</returns>
        public async System.Threading.Tasks.Task<List<Account>> GetOffersAsync ()
        {
             ApiResponse<List<Account>> localVarResponse = await GetOffersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of accounts for sale This is the list of accounts for sale.  You can purchase accounts if you have enough MicroCoin in your founder account. The account price will be deducted from the founder account balance. You must sign the transaction with the founder account private key.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Account>>> GetOffersAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/Account/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Account>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Account>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Account>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>List&lt;Transaction&gt;</returns>
        public List<Transaction> GetPendings (string accountNumber)
        {
             ApiResponse<List<Transaction>> localVarResponse = GetPendingsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of List&lt;Transaction&gt;</returns>
        public ApiResponse< List<Transaction> > GetPendingsWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountApi->GetPendings");

            var localVarPath = "./api/Account/{AccountNumber}/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("AccountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Transaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Transaction>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of List&lt;Transaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> GetPendingsAsync (string accountNumber)
        {
             ApiResponse<List<Transaction>> localVarResponse = await GetPendingsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;Transaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> GetPendingsAsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountApi->GetPendings");

            var localVarPath = "./api/Account/{AccountNumber}/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("AccountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Transaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Transaction>)));
        }

        /// <summary>
        /// Retrieve account transaction history 
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number to </param>
        /// <param name="start">Start from (optional)</param>
        /// <param name="max">Maximum lines to receive (optional)</param>
        /// <returns>List&lt;Transaction&gt;</returns>
        public List<Transaction> GetTransactions (string accountNumber, int? start = null, int? max = null)
        {
             ApiResponse<List<Transaction>> localVarResponse = GetTransactionsWithHttpInfo(accountNumber, start, max);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve account transaction history 
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number to </param>
        /// <param name="start">Start from (optional)</param>
        /// <param name="max">Maximum lines to receive (optional)</param>
        /// <returns>ApiResponse of List&lt;Transaction&gt;</returns>
        public ApiResponse< List<Transaction> > GetTransactionsWithHttpInfo (string accountNumber, int? start = null, int? max = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountApi->GetTransactions");

            var localVarPath = "./api/Account/{AccountNumber}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("AccountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (max != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Transaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Transaction>)));
        }

        /// <summary>
        /// Retrieve account transaction history 
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number to </param>
        /// <param name="start">Start from (optional)</param>
        /// <param name="max">Maximum lines to receive (optional)</param>
        /// <returns>Task of List&lt;Transaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> GetTransactionsAsync (string accountNumber, int? start = null, int? max = null)
        {
             ApiResponse<List<Transaction>> localVarResponse = await GetTransactionsAsyncWithHttpInfo(accountNumber, start, max);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve account transaction history 
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">Account number to </param>
        /// <param name="start">Start from (optional)</param>
        /// <param name="max">Maximum lines to receive (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Transaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> GetTransactionsAsyncWithHttpInfo (string accountNumber, int? start = null, int? max = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountApi->GetTransactions");

            var localVarPath = "./api/Account/{AccountNumber}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("AccountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (max != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Transaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Transaction>)));
        }

        /// <summary>
        /// Get a list of accounts belonging to the key Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The public key</param>
        /// <returns>List&lt;Account&gt;</returns>
        public List<Account> MyAccounts (SimpleKey key)
        {
             ApiResponse<List<Account>> localVarResponse = MyAccountsWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of accounts belonging to the key Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The public key</param>
        /// <returns>ApiResponse of List&lt;Account&gt;</returns>
        public ApiResponse< List<Account> > MyAccountsWithHttpInfo (SimpleKey key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AccountApi->MyAccounts");

            var localVarPath = "./api/Account/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null && key.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(key); // http body (model) parameter
            }
            else
            {
                localVarPostBody = key; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MyAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Account>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Account>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Account>)));
        }

        /// <summary>
        /// Get a list of accounts belonging to the key Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The public key</param>
        /// <returns>Task of List&lt;Account&gt;</returns>
        public async System.Threading.Tasks.Task<List<Account>> MyAccountsAsync (SimpleKey key)
        {
             ApiResponse<List<Account>> localVarResponse = await MyAccountsAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of accounts belonging to the key Every account belongs to a public key. If you know the public key you can retrieve the list of accounts belonging to the key.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The public key</param>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Account>>> MyAccountsAsyncWithHttpInfo (SimpleKey key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AccountApi->MyAccounts");

            var localVarPath = "./api/Account/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null && key.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(key); // http body (model) parameter
            }
            else
            {
                localVarPostBody = key; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MyAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Account>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Account>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Account>)));
        }

        /// <summary>
        /// Create new change key transaction With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">Initial transaction data</param>
        /// <returns>ChangeKeyRequest</returns>
        public ChangeKeyRequest StartChangeKey (ChangeKeyRequest changeKey)
        {
             ApiResponse<ChangeKeyRequest> localVarResponse = StartChangeKeyWithHttpInfo(changeKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new change key transaction With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">Initial transaction data</param>
        /// <returns>ApiResponse of ChangeKeyRequest</returns>
        public ApiResponse< ChangeKeyRequest > StartChangeKeyWithHttpInfo (ChangeKeyRequest changeKey)
        {
            // verify the required parameter 'changeKey' is set
            if (changeKey == null)
                throw new ApiException(400, "Missing required parameter 'changeKey' when calling AccountApi->StartChangeKey");

            var localVarPath = "./api/Account/change-key/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeKey != null && changeKey.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changeKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changeKey; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartChangeKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeKeyRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ChangeKeyRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeKeyRequest)));
        }

        /// <summary>
        /// Create new change key transaction With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">Initial transaction data</param>
        /// <returns>Task of ChangeKeyRequest</returns>
        public async System.Threading.Tasks.Task<ChangeKeyRequest> StartChangeKeyAsync (ChangeKeyRequest changeKey)
        {
             ApiResponse<ChangeKeyRequest> localVarResponse = await StartChangeKeyAsyncWithHttpInfo(changeKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new change key transaction With the change key transaction you can transfer your account to a new owner. To send a new changekey transaction you need to create a transaction using this this method,  then sign it with your private key. You can send your transaction using the CommitChangeKey method.
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeKey">Initial transaction data</param>
        /// <returns>Task of ApiResponse (ChangeKeyRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangeKeyRequest>> StartChangeKeyAsyncWithHttpInfo (ChangeKeyRequest changeKey)
        {
            // verify the required parameter 'changeKey' is set
            if (changeKey == null)
                throw new ApiException(400, "Missing required parameter 'changeKey' when calling AccountApi->StartChangeKey");

            var localVarPath = "./api/Account/change-key/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeKey != null && changeKey.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changeKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changeKey; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartChangeKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeKeyRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ChangeKeyRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeKeyRequest)));
        }

        /// <summary>
        /// Create purchase account transaction If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Transaction data</param>
        /// <returns>PurchaseAccountRequest</returns>
        public PurchaseAccountRequest StartPurchaseAccount (PurchaseAccountRequest data)
        {
             ApiResponse<PurchaseAccountRequest> localVarResponse = StartPurchaseAccountWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create purchase account transaction If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Transaction data</param>
        /// <returns>ApiResponse of PurchaseAccountRequest</returns>
        public ApiResponse< PurchaseAccountRequest > StartPurchaseAccountWithHttpInfo (PurchaseAccountRequest data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling AccountApi->StartPurchaseAccount");

            var localVarPath = "./api/Account/purchase/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartPurchaseAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseAccountRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PurchaseAccountRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseAccountRequest)));
        }

        /// <summary>
        /// Create purchase account transaction If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Transaction data</param>
        /// <returns>Task of PurchaseAccountRequest</returns>
        public async System.Threading.Tasks.Task<PurchaseAccountRequest> StartPurchaseAccountAsync (PurchaseAccountRequest data)
        {
             ApiResponse<PurchaseAccountRequest> localVarResponse = await StartPurchaseAccountAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create purchase account transaction If you want to purchase an account you need to create a new transaction, sign it then send it into the newtwork. This method creates a new transaction and a hash for you. You need to sign the hash then commit your transaction with the CommitPurchaseAccount method
        /// </summary>
        /// <exception cref="MicroCoin.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Transaction data</param>
        /// <returns>Task of ApiResponse (PurchaseAccountRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PurchaseAccountRequest>> StartPurchaseAccountAsyncWithHttpInfo (PurchaseAccountRequest data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling AccountApi->StartPurchaseAccount");

            var localVarPath = "./api/Account/purchase/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartPurchaseAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseAccountRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PurchaseAccountRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseAccountRequest)));
        }

    }
}
